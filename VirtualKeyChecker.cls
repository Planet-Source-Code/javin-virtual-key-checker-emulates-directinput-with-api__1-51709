VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "VirtualKeyChecker"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

'This module was written by Javin, and is Copyright 2002, Javin Inc.
'This module may not be sold in whole or in part, or redistributed in an uncompiled
'form, as a collection or otherwise, without the explicit written permission obtained
'from Javin@Javin-Inc.com

'This module is free for use and free distribution and may be used in any
'compiled application royalty free.  Javin Inc assumes no liabilty for any damage,
'data loss, corruption, or any other problems that may arise from using this module.
'Javin Inc is not responsible for how this module is used by other parties, and
'assumes no liability for any damage that may be caused by them.

'If you have actually had to read this because you were thinking of suing for some
'reason, screw you.

Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
Private Declare Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
Private Declare Function SetCursorPos Lib "user32" (ByVal X As Long, ByVal Y As Long) As Long
Private Declare Function ShowCursor Lib "user32" (ByVal bShow As Long) As Long

Private KeyVal(255) As Long
Private Names(255) As String
Private Common() As Long

Private Type POINTAPI
        X As Long
        Y As Long
End Type

Private OldMouse As POINTAPI, MouseStart As POINTAPI
Private pntMouse As POINTAPI
Private booLockMouse As Boolean

Public Enum VirtualKey
    VK_LBUTTON = &H1      'Left mouse button.
    VK_RBUTTON = &H2      'Right mouse button.
    VK_CANCEL = &H3       'Used for control-break processing.
    VK_MBUTTON = &H4      'Middle mouse button (3-button mouse).
                                        '05h through 07h undefined.
    VK_BACK = &H8
    VK_TAB = &H9
                                        '0Ah and 0Bh undefined.
    VK_CLEAR = &HC
    VK_RETURN = &HD
                                        '0Eh and 0Fh undefined.
    VK_SHIFT = &H10
    VK_CONTROL = &H11
    VK_MENU = &H12        'Alt Key
    VK_PAUSE = &H13
    VK_CAPITAL = &H14     'Caps Lock
                                        '15h through 1Ah undefined.
    VK_ESCAPE = &H1B
                                        '1Ch through 1Fh undefined.
    VK_SPACE = &H20
    VK_PRIOR = &H21       'Page up.
    VK_NEXT = &H22        'Page down.
    VK_END = &H23
    VK_HOME = &H24
    VK_LEFT = &H25
    VK_UP = &H26
    VK_RIGHT = &H27
    VK_DOWN = &H28
    VK_SELECT = &H29
    VK_PRINT = &H2A       'Only used by Nokia.
    VK_EXECUTE = &H2B     'Never used.
    VK_SNAPSHOT = &H2C    'SYSREQ key starting with Windows 3.0.
    VK_INSERT = &H2D
    VK_DELETE = &H2E
    VK_HELP = &H2F
    VK_0 = &H30
    VK_1 = &H31
    VK_2 = &H32
    VK_3 = &H33
    VK_4 = &H34
    VK_5 = &H35
    VK_6 = &H36
    VK_7 = &H37
    VK_8 = &H38
    VK_9 = &H39
                                        '3Ah though 40h undefined.
    VK_A = &H41
    VK_B = &H42
    VK_C = &H43
    VK_D = &H44
    VK_E = &H45
    VK_F = &H46
    VK_G = &H47
    VK_H = &H48
    VK_I = &H49
    VK_J = &H4A
    VK_K = &H4B
    VK_L = &H4C
    VK_M = &H4D
    VK_N = &H4E
    VK_O = &H4F
    VK_P = &H50
    VK_Q = &H51
    VK_R = &H52
    VK_S = &H53
    VK_T = &H54
    VK_U = &H55
    VK_V = &H56
    VK_W = &H57
    VK_X = &H58
    VK_Y = &H59
    VK_Z = &H5A
    VK_LWINDOW = &H5B
    VK_RWINDOW = &H5C
    VK_RDROPDOWN = &H5D
                                        '5Bh through 5Fh undefined - According to MSDN
    VK_NUMPAD0 = &H60
    VK_NUMPAD1 = &H61
    VK_NUMPAD2 = &H62
    VK_NUMPAD3 = &H63
    VK_NUMPAD4 = &H64
    VK_NUMPAD5 = &H65
    VK_NUMPAD6 = &H66
    VK_NUMPAD7 = &H67
    VK_NUMPAD8 = &H68
    VK_NUMPAD9 = &H69
    VK_MULTIPLY = &H6A
    VK_ADD = &H6B
    VK_SEPARATOR = &H6C   'Never generated by keyboard driver
    VK_SUBTRACT = &H6D
    VK_DECIMAL = &H6E
    VK_DIVIDE = &H6F
    VK_F1 = &H70
    VK_F2 = &H71
    VK_F3 = &H72
    VK_F4 = &H73
    VK_F5 = &H74
    VK_F6 = &H75
    VK_F7 = &H76
    VK_F8 = &H77
    VK_F9 = &H78
    VK_F10 = &H79
    VK_F11 = &H7A
    VK_F12 = &H7B
    VK_F13 = &H7C
    VK_F14 = &H7D
    VK_F15 = &H7E
    VK_F16 = &H7F
    VK_F17 = &H80
    VK_F18 = &H81
    VK_F19 = &H82
    VK_F20 = &H83
    VK_F21 = &H84
    VK_F22 = &H85
    VK_F23 = &H86
    VK_F24 = &H87
                                        '88h through 8Fh unassigned.
    VK_NUMLOCK = &H90     'NUMLOCK on all keyboards
    VK_SCROLL = &H91      'SCROLL LOCK on all keyboards.
                                        '92h through B9h unassigned according to MSDN
    VK_LSHIFT = &HA0
    VK_RSHIFT = &HA1
    VK_LCONTROL = &HA2
    VK_RCONTROL = &HA3
    VK_LMENU = &HA4       'Left Alt
    VK_RMENU = &HA5       'Right Alt
                                
    VK_COLON = &HBA       'Punctuation.
    VK_PLUS = &HBB        'Punctuation.
    VK_COMMA = &HBC       'Punctuation.
    VK_MINUS = &HBD       'Punctuation.
    VK_PERIOD = &HBE      'Punctuation.
    VK_QUESTION = &HBF    'Punctuation.
    VK_TILDE = &HC0       'Punctuation.
                                        'C1h through DAh unassigned.
    VK_LBRACKET = &HDB    'Punctuation.
    VK_BACKSLASH = &HDC   'Punctuation.
    VK_RBRACKET = &HDD    'Punctuation.
    VK_QUOTE = &HDE       'Punctuation.
    VK_OEM_8 = &HDF       'Punctuation.
    VK_F17O = &HE0        'F17 key on Olivetti extended keyboard (internal use only).
    VK_F18O = &HE1        'F18 key on Olivetti extended keyboard (internal use only).
    VK_OEM_102 = &HE2     '< or | on IBM-compatible 102 enhanced keyboard (non-U.S.).
    VK_ICO_HELP = &HE3    'Help key on Olivetti extended keyboard (internal use only).
    VK_ICO_00 = &HE4      '00 key on Olivetti extended keyboard (internal use only).
    VK_PROCESSKEY = &HE5  'E5h unassigned - According to MSDN
    VK_ICO_CLEAR = &HE6   'Olivetti extended keyboard (internal use only).
                                        'E7h and E8h unassigned.
    VK_OEM_RESET = &HE9   'Only used by Nokia.
    VK_OEM_JUMP = &HEA    'Only used by Nokia.
    VK_OEM_PA1 = &HEB     'Only used by Nokia.
    VK_OEM_PA2 = &HEC     'Only used by Nokia.
    VK_OEM_PA3 = &HED     'Only used by Nokia.
    VK_OEM_WSCTRL = &HEE  'Only used by Nokia.
    VK_OEM_CUSEL = &HEF   'Only used by Nokia.
    VK_OEM_ATTN = &HF0    'Only used by Nokia.
    VK_OEM_FINNISH = &HF1 'Only used by Nokia.
    VK_OEM_COPY = &HF2    'Only used by Nokia.
    VK_OEM_AUTO = &HF3    'Only used by Nokia.
    VK_OEM_ENLW = &HF4    'Only used by Nokia.
    VK_OEM_BACKTAB = &HF5 'Only used by Nokia.
    VK_ATTN = &HF6
    VK_CRSEL = &HF7
    VK_EXSEL = &HF8
    VK_EREOF = &HF9
    VK_PLAY = &HFA
    VK_ZOOM = &HFB
    VK_NONAME = &HFC
    VK_PA1 = &HFD
    VK_OEM_CLEAR = &HFE
End Enum

Private lngTemp As Long

Public Function Held(ByVal V_Key As VirtualKey) As Boolean
    KeyVal(V_Key) = GetKeyState(V_Key)
    If KeyVal(V_Key) < 0 Then Held = True Else Held = False
End Function

Public Function Pressed(ByVal V_Key As VirtualKey) As Boolean
    Pressed = False
    lngTemp = GetKeyState(V_Key)
    If lngTemp < 0 Then lngTemp = -1
    If KeyVal(V_Key) <> lngTemp Then
        If (lngTemp = -1) Or (lngTemp + KeyVal(V_Key) = 1) Then Pressed = True
        KeyVal(V_Key) = lngTemp
    End If
End Function

Public Function PressAnyKey() As Long
    Dim lngCount As Long
    PressAnyKey = -1
    For lngCount = 0 To UBound(Common)
        If Pressed(Common(lngCount)) Then PressAnyKey = Common(lngCount)
    Next lngCount
End Function

Public Function PressAny() As Long
    Dim lngCount As Long
    PressAny = -1
    For lngCount = 0 To 255
        If Pressed(lngCount) Then PressAny = lngCount
    Next lngCount
End Function


Private Sub Class_Initialize()
    Dim lngCount As Long
    Dim strCommon As String
    Dim strTemp() As String
    
    For lngCount = 0 To 255
        Names(lngCount) = "Unknown: &" & Hex(lngCount)
    Next lngCount
    
    Names(&H1) = "L-Mouse": Names(&H2) = "R-Mouse": Names(&H4) = "M-Mouse"
    
    strCommon = "&H8 Backspace,&H9 Tab,&HD Enter,&H10Shift,&H11Control," & _
    "&H12Alt,&H14Caps Lock,&H1BEscape,&H20Space,&H21Page Up,&H22Page Down,&H23End,&H24Home,&H25Left,&H26Up," & _
    "&H27Right,&H28Down,&H2CPrnt Scrn,&H2DInsert,&H2EDelete,&H300,&H311,&H322,&H333,&H344,&H355,&H366,&H377," & _
    "&H388,&H399,&H41A,&H42B,&H43C,&H44D,&H45E,&H46F,&H47G,&H48H,&H49I,&H4AJ,&H4BK,&H4CL,&H4DM,&H4EN,&H4FO," & _
    "&H50P,&H51Q,&H52R,&H53S,&H54T,&H55U,&H56V,&H57W,&H58X,&H59Y,&H5AZ,&H5BL-Window,&H5CR-Window,&H5DR-Dropdown," & _
    "&H60Numpad 0,&H61Numpad 1,&H62Numpad 2,&H63Numpad 3,&H64Numpad 4,&H65Numpad 5,&H66Numpad 6,&H67Numpad 7," & _
    "&H68Numpad 8,&H69Numpad 9,&H6ANumpad *,&H6BNumpad +,&H6DNumpad -,&H6ENumpad .,&H6FNumpad /,&H70F1,&H71F2," & _
    "&H72F3,&H73F4,&H74F5,&H75F6,&H76F7,&H77F8,&H78F9,&H79F10,&H7AF11,&H7BF12,&H7CF13,&H7DF14,&H7EF15,&H7FF16," & _
    "&H80F17,&H81F18,&H82F19,&H83F20,&H84F21,&H85F22,&H86F23,&H87F24,&H90Num Lock,&H91Scroll Lock,&HA0L-Shift," & _
    "&HA1R-Shift,&HA2L-Control,&HA3R-Control,&HA4Left Alt,&HA5Right Alt,&HBAColon ;,&HBB+/=,&HBCComma,&HBD-/_," & _
    "&HBEPeriod,&HBF? /,&HC0Tilde,&HDBL-Bracket [,&HDCBackslash \,&HDDR-Bracket ],&HDEQuote " & Chr$(34)

    
    strTemp = Split(strCommon, ",")
    ReDim Common(UBound(strTemp))
    
    For lngCount = 0 To UBound(strTemp)
        Common(lngCount) = Val(Left$(strTemp(lngCount), 4))
        Names(Common(lngCount)) = Mid$(strTemp(lngCount), 5)
    Next lngCount
    ClearKeys
    GetCursorPos OldMouse
End Sub

Public Sub ClearKeys()
    Dim lngCount As Long
    For lngCount = 0 To 255
        KeyVal(lngCount) = GetKeyState(lngCount)
    Next lngCount
End Sub

Public Function GetName(ByVal V_Key As VirtualKey) As String
    If V_Key > -1 And V_Key < 256 Then GetName = Names(V_Key)
End Function

Public Function GetMouseChange(ByRef X As Long, ByRef Y As Long)
    GetCursorPos pntMouse
    X = pntMouse.X - OldMouse.X
    Y = pntMouse.Y - OldMouse.Y
    If booLockMouse Then
        SetCursorPos OldMouse.X, OldMouse.Y
    Else
        OldMouse.X = pntMouse.X
        OldMouse.Y = pntMouse.Y
    End If
End Function

Public Function GetMousePosition(ByRef X As Long, ByRef Y As Long)
    GetCursorPos pntMouse
    X = pntMouse.X
    Y = pntMouse.Y
End Function

Public Function LockMouse(ByVal Locked As Boolean, Optional ByVal XPos As Long = -1, Optional ByVal YPos As Long = -1)
    If Locked Then
        GetCursorPos MouseStart
        If XPos = -1 Then XPos = MouseStart.X
        If YPos = -1 Then YPos = MouseStart.Y
        OldMouse.X = XPos
        OldMouse.Y = YPos
        pntMouse.X = XPos
        pntMouse.Y = YPos
        SetCursorPos XPos, YPos
    Else
        SetCursorPos MouseStart.X, MouseStart.Y
    End If
    booLockMouse = Locked
End Function

Public Function ShowMouseCursor(ByVal Value As Boolean)
    If Value Then
        While ShowCursor(1) < 1: Wend
    Else
        While ShowCursor(0) > -1: Wend
    End If
End Function

Public Function GetValue(ByVal Name As String) As Long
    Dim lngCount As Long
    GetValue = -1
    For lngCount = 0 To UBound(Names)
        If Names(lngCount) = Name Then GetValue = lngCount
    Next lngCount
End Function
